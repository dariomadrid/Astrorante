---
import { renderRichText } from "@storyblok/astro";
import Link from "@components/navigation/Link.astro";
import DOMPurify from "dompurify"; // Import DOMPurify

interface Props {
  blok: TextMediaStoryblok;
}

const { blok } = Astro.props;

const { title, address, links, iframe_url, surface, align, container, image, video, opacity } = blok;

const renderedRichTextAddress = renderRichText(address);

// Ensure iframe_url is a string
let iframeContent = "";

// Function to extract HTML from rich text structure
const extractHtmlFromRichText = (richText: any) => {
  if (!richText || !richText.content) return "";

  // Recursively extract text from the rich text structure
  const extractText = (node: any) => {
    if (node.type === "text") {
      return node.text;
    } else if (node.content) {
      return node.content.map(extractText).join("");
    }
    return "";
  };

  return richText.content.map(extractText).join("");
};

if (iframe_url && iframe_url.type === "doc") {
  // Extract the HTML content from the rich text structure
  const iframeHtml = extractHtmlFromRichText(iframe_url);

  // Unescape HTML characters (good practice)
  const unescapeHtml = (html: any) => {
    return html
      .replace(/&lt;/g, "<")
      .replace(/&gt;/g, ">")
      .replace(/&quot;/g, '"')
      .replace(/&amp;/g, "&");
  };

  const unescapedHtml = unescapeHtml(iframeHtml);

  if (typeof window !== "undefined") {
    // Browser environment
    const safeIframeContent = DOMPurify.sanitize(unescapedHtml); // Sanitize!!
    iframeContent = safeIframeContent;
  } else {
    // Server environment
    iframeContent = unescapedHtml; // Or a safe default for SSR
  }
} else {
  console.error("iframe_url is not in the expected format:", iframe_url);
}
---
<!-- TÃ­tulo -->
<div class={` ${surface || ""} flex flex-col items-center p-12 w-full`}>
  <h1 set:html={title} class="text-ellipsis text-5xl md:text-6xl mb-8"></h1>

  <div class="grid grid-cols-1 md:grid-cols-2 gap-4 p-12 w-full">  
    <div class="col-span-1 self-start">
      {
        iframeContent && (
          <div class="responsive-iframe-container">
            <div
              set:html={iframeContent}
              class="richtext max-w-2xl text-ellipsis text-lg md:text-xl"
            />
          </div>
        )
      }
    </div>
    <div class="col-span-1 ml-4 self-end">
      <!-- Contenido de la segunda columna -->
      <p set:html={renderedRichTextAddress} class="text-ellipsis text-lg md:text-xl"></p>
      {
        links && links.length > 0 && (
          <div class="buttons flex flex-col items-end gap-6 pt-6 text-sm">
            {links.map((link) => (
              <div class="self-end">
                <Link
                  blok={{
                    ...link,
                  }}
                />
              </div>
            ))}
          </div>
        )
      }      
    </div>
  </div>
</div>

<style>
.responsive-iframe-container {
  position: relative;
  width: 100%;
  padding-bottom: 56.25%; /* 16:9 aspect ratio */
  height: 0;
  overflow: hidden;
}

.responsive-iframe-container iframe {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border: 0;
}
</style>